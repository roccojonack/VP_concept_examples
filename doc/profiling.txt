There are a number of profiler options available. The most intuitive tools are function profilers, 
which analyze which functions are called how often and how long the calls took. There are free 
opensource tools and commertial tools. Intel provides vtunes as a commercial tool. But a lot of 
users rely on open source tools like valgrind, gprof or googleperf.

There is not much support in the inway environment. There is not even a vtunes license for Linux 
available as of today. Hence using the free opensource tools especially with gcc seems like the 
better alternative. 

gprof is a very simple profiling tool, but also pretty old. In order to get gprof output add 
-pg option to the compiler calls. However the output can sometimes be very misleading, because 
threads are not well supported.

googleperf seems to have some issues with the x86_64 architecture, which is for us the most 
important architecture.

valgrind seems to be a very good option. No additional libraries and/or compile options are 
required. The installation under inway seems to be broken. Also a very which I found under 
/usr/intel/bin didn't work for me. I installed a version under:

/nfs/imu/proj/dbb/vpmuc/third_party/tools/valgrind

In order to get profiling for an excutable <foo> call:

/nfs/imu/proj/dbb/vpmuc/third_party/tools/valgrind/bin/valgrind --tool=callgrind <foo>

The ouptut is being dumped into a file called callgrind.out.<PID>. This file can be analysed 
using callgrind_annotate. There is also a graphical tool for analysis, but installation is pending.

Note that there are some environment variables, which may modify the default behaviour.
Check for :

setenv | grep VALGRIND



